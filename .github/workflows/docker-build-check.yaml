name: Docker Build Check

permissions:
  contents: read

on:
  pull_request:
    paths:
      - 'services/**'
      - 'bots/**'
      - 'dashboard/**'
      - '**/Dockerfile'
      - '**/Dockerfile.*'
  push:
    branches:
      - master
    paths:
      - 'services/**'
      - 'bots/**'
      - 'dashboard/**'
      - '**/Dockerfile'
      - '**/Dockerfile.*'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      dockerfiles: ${{ steps.changes.outputs.dockerfiles }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get affected services with Dockerfiles
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For pull requests, compare against the base branch
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
            CHANGED_FILES=$(git diff --name-only $BASE_SHA..$HEAD_SHA)
          else
            # For pushes, compare against the previous commit
            if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
              # New branch, compare against HEAD~1
              CHANGED_FILES=$(git diff --name-only HEAD~1)
            else
              CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }})
            fi
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Find all directories that have changes and contain Dockerfiles
          AFFECTED_DIRS=""
          
          # Get unique directories from changed files
          CHANGED_DIRS=$(echo "$CHANGED_FILES" | xargs -I {} dirname {} | sort -u)
          
          # Check each changed directory and its parent directories for Dockerfiles
          for dir in $CHANGED_DIRS; do
            # Check current directory and walk up the tree
            current_dir="$dir"
            while [ "$current_dir" != "." ] && [ "$current_dir" != "/" ]; do
              if [ -f "$current_dir/Dockerfile" ]; then
                AFFECTED_DIRS="$AFFECTED_DIRS $current_dir"
                break
              fi
              current_dir=$(dirname "$current_dir")
            done
          done
          
          # Remove duplicates and limit to 20 services
          AFFECTED_DIRS=$(echo "$AFFECTED_DIRS" | tr ' ' '\n' | sort -u | head -20)
          
          if [ -z "$AFFECTED_DIRS" ]; then
            echo "dockerfiles=[]" >> $GITHUB_OUTPUT
            echo "No services with Dockerfiles affected"
          else
            echo "Affected services with Dockerfiles:"
            echo "$AFFECTED_DIRS"
            
            # Convert to JSON array with context information
            DOCKERFILE_ARRAY="["
            FIRST=true
            for dir in $AFFECTED_DIRS; do
              if [ -f "$dir/Dockerfile" ]; then
                if [ "$FIRST" = false ]; then
                  DOCKERFILE_ARRAY="$DOCKERFILE_ARRAY,"
                fi
                FIRST=false
                
                # Extract service name and determine context
                SERVICE_NAME=$(basename "$dir")
                DOCKERFILE_PATH="$dir/Dockerfile"
                
                if [ "$SERVICE_NAME" = "service-plugin" ] || [ "$SERVICE_NAME" = "gateway-external" ]; then
                  DOCKERFILE_ARRAY="$DOCKERFILE_ARRAY{\"path\":\"$DOCKERFILE_PATH\",\"context\":\".\",\"service\":\"$SERVICE_NAME\"}"
                else
                  DOCKERFILE_ARRAY="$DOCKERFILE_ARRAY{\"path\":\"$DOCKERFILE_PATH\",\"context\":\"$dir\",\"service\":\"$SERVICE_NAME\"}"
                fi
              fi
            done
            DOCKERFILE_ARRAY="$DOCKERFILE_ARRAY]"
            
            echo "dockerfiles=$DOCKERFILE_ARRAY" >> $GITHUB_OUTPUT
          fi

  build-affected-services:
    needs: detect-changes
    if: needs.detect-changes.outputs.dockerfiles != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ${{ fromJson(needs.detect-changes.outputs.dockerfiles) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for ${{ matrix.dockerfile.service }}
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.dockerfile.context }}
          file: ${{ matrix.dockerfile.path }}
          push: false
          tags: test-build:${{ matrix.dockerfile.service }}
          cache-from: type=gha,scope=${{ matrix.dockerfile.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.dockerfile.service }}

      - name: Verify build success for ${{ matrix.dockerfile.service }}
        run: |
          echo "‚úÖ Docker build successful for ${{ matrix.dockerfile.service }}"
          echo "üìÅ Context: ${{ matrix.dockerfile.context }}"
          echo "üê≥ Dockerfile: ${{ matrix.dockerfile.path }}"

  build-summary:
    needs: [detect-changes, build-affected-services]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          if [ "${{ needs.detect-changes.outputs.dockerfiles }}" = "[]" ]; then
            echo "‚ÑπÔ∏è No services with Dockerfiles were affected in this commit."
          elif [ "${{ needs.build-affected-services.result }}" = "success" ]; then
            echo "‚úÖ All Docker builds completed successfully!"
          elif [ "${{ needs.build-affected-services.result }}" = "failure" ]; then
            echo "‚ùå Some Docker builds failed. Please check the logs above."
            exit 1
          elif [ "${{ needs.build-affected-services.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è Docker builds were skipped."
          else
            echo "‚ö†Ô∏è Docker builds completed with status: ${{ needs.build-affected-services.result }}"
          fi 
