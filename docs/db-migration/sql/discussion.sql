-- This script was generated by the Schema Diff utility in pgAdmin 4. 
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated 
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps. 
 BEGIN; 
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
 CREATE SEQUENCE IF NOT EXISTS public.message_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.message_seq
    OWNER TO postgres;
CREATE SEQUENCE IF NOT EXISTS public.participant_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.participant_seq
    OWNER TO postgres;
CREATE SEQUENCE IF NOT EXISTS public.discussion_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.discussion_seq
    OWNER TO postgres;

CREATE TABLE IF NOT EXISTS public.discussion
(
    id bigint NOT NULL DEFAULT nextval('discussion_seq'::regclass),
    discussion_id uuid DEFAULT uuid_generate_v4(),
    dao_id uuid,
    topic text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    created_by uuid,
    updated_by uuid,
    category text COLLATE pg_catalog."default",
    category_id uuid,
    closed boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone,
    closed_on timestamp without time zone,
    proposal_id text COLLATE pg_catalog."default",
    CONSTRAINT discussion_pkey PRIMARY KEY (id),
    CONSTRAINT discussion_discussion_id_key UNIQUE (discussion_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.discussion
    OWNER to postgres;
    
CREATE TABLE IF NOT EXISTS public.message
(
    id bigint NOT NULL DEFAULT nextval('message_seq'::regclass),
    message_id uuid DEFAULT uuid_generate_v4(),
    discussion_id uuid,
    type text COLLATE pg_catalog."default",
    content text COLLATE pg_catalog."default",
    sender_id uuid,
    attachment_link text COLLATE pg_catalog."default",
    metadata json DEFAULT '{}'::json,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone,
    CONSTRAINT message_pkey PRIMARY KEY (id),
    CONSTRAINT message_message_id_key UNIQUE (message_id),
    CONSTRAINT discussion_id_fk FOREIGN KEY (discussion_id)
        REFERENCES public.discussion (discussion_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.message
    OWNER to postgres;

CREATE TABLE IF NOT EXISTS public.participant
(
    id bigint NOT NULL DEFAULT nextval('participant_seq'::regclass),
    discussion_id uuid,
    member_id uuid,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT participant_pkey PRIMARY KEY (id),
    CONSTRAINT discussion_id_fk FOREIGN KEY (discussion_id)
        REFERENCES public.discussion (discussion_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.participant
    OWNER to postgres;
CREATE OR REPLACE VIEW public.discussion_view
 AS
 SELECT d.discussion_id,
    d.dao_id,
    d.topic,
    d.description,
    d.created_by,
    d.updated_by,
    d.category,
    d.category_id,
    d.closed,
    d.created_at,
    d.updated_at,
    ( SELECT count(p.member_id) AS count
           FROM participant p
          WHERE p.discussion_id = d.discussion_id) AS participant_count,
    ARRAY( SELECT p_1.member_id
           FROM participant p_1
             JOIN message m ON m.discussion_id = p_1.discussion_id
          WHERE p_1.discussion_id = d.discussion_id
          ORDER BY m.created_at DESC
         LIMIT 5) AS participants,
    to_json(ARRAY( SELECT json_build_object('message_id', m.message_id, 'discussion_id', m.discussion_id, 'type', m.type, 'content', m.content, 'sender_id', m.sender_id, 'attachment_link', m.attachment_link, 'metadata', m.metadata, 'created_at', m.created_at, 'updated_at', m.updated_at) AS message
           FROM message m
          WHERE m.discussion_id = d.discussion_id
          ORDER BY m.created_at DESC
         LIMIT 5)) AS messages,
    d.proposal_id
   FROM discussion d;

ALTER TABLE public.discussion_view
    OWNER TO postgres;



 END;