-- This script was generated by the Schema Diff utility in pgAdmin 4. 
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated 
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps. 
 BEGIN; 
 CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
 CREATE OR REPLACE FUNCTION public.enum_to_position(
	anyenum)
    RETURNS integer
    LANGUAGE 'sql'
    COST 100
    STABLE STRICT PARALLEL UNSAFE
AS $BODY$
SELECT enumpos::integer FROM (
        SELECT row_number() OVER (order by enumsortorder) AS enumpos,
               enumsortorder,
               enumlabel
        FROM pg_catalog.pg_enum
        WHERE enumtypid = pg_typeof($1)
    ) enum_ordering
    WHERE enumlabel = ($1::text);
$BODY$;

ALTER FUNCTION public.enum_to_position(anyenum)
    OWNER TO postgres;

CREATE SEQUENCE IF NOT EXISTS public.applicants_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.applicants_seq
    OWNER TO postgres;
CREATE SEQUENCE IF NOT EXISTS public.profile_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.profile_seq
    OWNER TO postgres;
CREATE SEQUENCE IF NOT EXISTS public.opportunity_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.opportunity_seq
    OWNER TO postgres;
CREATE SEQUENCE IF NOT EXISTS public.job_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.job_seq
    OWNER TO postgres;
CREATE SEQUENCE IF NOT EXISTS public.submission_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.submission_seq
    OWNER TO postgres;
CREATE SEQUENCE IF NOT EXISTS public.skill_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.skill_seq
    OWNER TO postgres;
CREATE SEQUENCE IF NOT EXISTS public.tag_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.tag_seq
    OWNER TO postgres;
CREATE SEQUENCE IF NOT EXISTS public.job_files_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.job_files_seq
    OWNER TO postgres;
CREATE SEQUENCE IF NOT EXISTS public.bounty_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.bounty_seq
    OWNER TO postgres;
CREATE SEQUENCE IF NOT EXISTS public.bounty_files_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.bounty_files_seq
    OWNER TO postgres;
CREATE SEQUENCE IF NOT EXISTS public.favourite_seq
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.favourite_seq
    OWNER TO postgres;

-- Type: applicantstatustype

-- DROP TYPE IF EXISTS public.applicantstatustype;

CREATE TYPE public.applicantstatustype AS ENUM
    ('applied', 'accepted', 'rejected');

ALTER TYPE public.applicantstatustype
    OWNER TO postgres;
-- Type: jobtype

-- DROP TYPE IF EXISTS public.jobtype;

CREATE TYPE public.jobtype AS ENUM
    ('project', 'task');

ALTER TYPE public.jobtype
    OWNER TO postgres;
-- Type: visibilitytype

-- DROP TYPE IF EXISTS public.visibilitytype;

CREATE TYPE public.visibilitytype AS ENUM
    ('public', 'private');

ALTER TYPE public.visibilitytype
    OWNER TO postgres;
-- Type: statustype

-- DROP TYPE IF EXISTS public.statustype;

CREATE TYPE public.statustype AS ENUM
    ('open', 'draft', 'closed');

ALTER TYPE public.statustype
    OWNER TO postgres;

CREATE TABLE IF NOT EXISTS public.opportunity
(
    id bigint NOT NULL DEFAULT nextval('opportunity_seq'::regclass),
    job_id uuid DEFAULT uuid_generate_v4(),
    type jobtype,
    title text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    payout_amount numeric DEFAULT 0,
    payout_currency text COLLATE pg_catalog."default",
    req_people_count integer DEFAULT 1,
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    github text COLLATE pg_catalog."default",
    dao_id uuid NOT NULL,
    poc_member_id uuid,
    task_id uuid,
    skills text[] COLLATE pg_catalog."default" DEFAULT '{}'::text[],
    tags text[] COLLATE pg_catalog."default" DEFAULT '{}'::text[],
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone,
    questions json DEFAULT '{}'::json,
    status statustype DEFAULT 'draft'::statustype,
    created_by uuid,
    visibility visibilitytype DEFAULT 'public'::visibilitytype,
    captain boolean DEFAULT false,
    project_id uuid,
    department uuid,
    updated_by uuid,
    open_to text[] COLLATE pg_catalog."default" DEFAULT '{}'::text[],
    experience text COLLATE pg_catalog."default",
    job_format text COLLATE pg_catalog."default",
    CONSTRAINT opportunity_pkey PRIMARY KEY (id),
    CONSTRAINT opportunity_job_id_key UNIQUE (job_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.opportunity
    OWNER to postgres;
CREATE TABLE IF NOT EXISTS public.bounty
(
    id bigint NOT NULL DEFAULT nextval('bounty_seq'::regclass),
    bounty_id uuid DEFAULT uuid_generate_v4(),
    dao_id uuid NOT NULL,
    title text COLLATE pg_catalog."default",
    description text COLLATE pg_catalog."default",
    payout_amount integer DEFAULT 0,
    payout_currency text COLLATE pg_catalog."default",
    winner_count integer,
    start_date timestamp without time zone,
    end_date timestamp without time zone,
    poc_member_id uuid,
    created_by uuid NOT NULL,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone,
    tags text[] COLLATE pg_catalog."default" DEFAULT '{}'::text[],
    skills text[] COLLATE pg_catalog."default" DEFAULT '{}'::text[],
    visibility visibilitytype DEFAULT 'public'::visibilitytype,
    req_people_count integer DEFAULT 1,
    status statustype DEFAULT 'draft'::statustype,
    department uuid,
    updated_by uuid,
    CONSTRAINT bounty_pkey PRIMARY KEY (id),
    CONSTRAINT bounty_bounty_id_key UNIQUE (bounty_id)
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.bounty
    OWNER to postgres;
CREATE TABLE IF NOT EXISTS public.submission
(
    id bigint NOT NULL DEFAULT nextval('submission_seq'::regclass),
    bounty_id uuid,
    member_id uuid,
    submission text COLLATE pg_catalog."default",
    file text COLLATE pg_catalog."default",
    status applicantstatustype DEFAULT 'applied'::applicantstatustype,
    rank integer,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone,
    feedback text COLLATE pg_catalog."default",
    submission_id uuid DEFAULT uuid_generate_v4(),
    clan_id uuid,
    CONSTRAINT submission_pkey PRIMARY KEY (id),
    CONSTRAINT submission_submission_id_key UNIQUE (submission_id),
    CONSTRAINT bounty_id_fk FOREIGN KEY (bounty_id)
        REFERENCES public.bounty (bounty_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.submission
    OWNER to postgres;
CREATE TABLE IF NOT EXISTS public.bounty_files
(
    id bigint NOT NULL DEFAULT nextval('bounty_files_seq'::regclass),
    bounty_file_id uuid DEFAULT uuid_generate_v4(),
    bounty_id uuid,
    name text COLLATE pg_catalog."default",
    url text COLLATE pg_catalog."default",
    metadata json NOT NULL DEFAULT '{}'::json,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    CONSTRAINT bounty_files_pkey PRIMARY KEY (id),
    CONSTRAINT bounty_files_bounty_file_id_key UNIQUE (bounty_file_id),
    CONSTRAINT bounty_files_bounty_id_fkey FOREIGN KEY (bounty_id)
        REFERENCES public.bounty (bounty_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.bounty_files
    OWNER to postgres;
CREATE TABLE IF NOT EXISTS public.applicants
(
    id bigint NOT NULL DEFAULT nextval('applicants_seq'::regclass),
    applicant_id uuid DEFAULT uuid_generate_v4(),
    job_id uuid,
    member_id uuid,
    answers json DEFAULT '{}'::json,
    status applicantstatustype DEFAULT 'applied'::applicantstatustype,
    created_at timestamp without time zone DEFAULT now(),
    updated_at timestamp without time zone,
    application text COLLATE pg_catalog."default",
    clan_id uuid,
    CONSTRAINT applicants_pkey PRIMARY KEY (id),
    CONSTRAINT applicants_applicant_id_key UNIQUE (applicant_id),
    CONSTRAINT job_id FOREIGN KEY (job_id)
        REFERENCES public.opportunity (job_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.applicants
    OWNER to postgres;
CREATE TABLE IF NOT EXISTS public.job_files
(
    id bigint NOT NULL DEFAULT nextval('job_files_seq'::regclass),
    job_file_id uuid DEFAULT uuid_generate_v4(),
    job_id uuid,
    name text COLLATE pg_catalog."default",
    url text COLLATE pg_catalog."default",
    metadata json DEFAULT '{}'::json,
    created_at timestamp without time zone NOT NULL DEFAULT now(),
    CONSTRAINT job_files_pkey PRIMARY KEY (id),
    CONSTRAINT job_files_job_file_id_key UNIQUE (job_file_id),
    CONSTRAINT job_files_job_id_fkey FOREIGN KEY (job_id)
        REFERENCES public.opportunity (job_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.job_files
    OWNER to postgres;
CREATE TABLE IF NOT EXISTS public.favourite_job
(
    id bigint NOT NULL DEFAULT nextval('favourite_seq'::regclass),
    job_id uuid,
    member_id uuid,
    created_at timestamp without time zone DEFAULT now(),
    CONSTRAINT favourite_pkey PRIMARY KEY (id),
    CONSTRAINT job_id_fk FOREIGN KEY (job_id)
        REFERENCES public.opportunity (job_id) MATCH SIMPLE
        ON UPDATE CASCADE
        ON DELETE CASCADE
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.favourite_job
    OWNER to postgres;

CREATE OR REPLACE VIEW public.job_open_to
 AS
 SELECT DISTINCT unnest(opportunity.open_to) AS oprn_to,
    count(*) AS count
   FROM opportunity
  GROUP BY (unnest(opportunity.open_to))
  ORDER BY (count(*)) DESC;

ALTER TABLE public.job_open_to
    OWNER TO postgres;


CREATE OR REPLACE VIEW public.bounty_tags
 AS
 SELECT DISTINCT unnest(bounty.tags) AS tag,
    count(*) AS count
   FROM bounty
  GROUP BY (unnest(bounty.tags))
  ORDER BY (count(*)) DESC;

ALTER TABLE public.bounty_tags
    OWNER TO postgres;


CREATE OR REPLACE VIEW public.job_skills
 AS
 SELECT DISTINCT unnest(opportunity.skills) AS skill,
    count(*) AS count
   FROM opportunity
  GROUP BY (unnest(opportunity.skills))
  ORDER BY (count(*)) DESC;

ALTER TABLE public.job_skills
    OWNER TO postgres;


CREATE OR REPLACE VIEW public.job_tags
 AS
 SELECT DISTINCT unnest(opportunity.tags) AS tag,
    count(*) AS count
   FROM opportunity
  GROUP BY (unnest(opportunity.tags))
  ORDER BY (count(*)) DESC;

ALTER TABLE public.job_tags
    OWNER TO postgres;


CREATE OR REPLACE VIEW public.bounty_skills
 AS
 SELECT DISTINCT unnest(bounty.skills) AS skill,
    count(*) AS count
   FROM bounty
  GROUP BY (unnest(bounty.skills))
  ORDER BY (count(*)) DESC;

ALTER TABLE public.bounty_skills
    OWNER TO postgres;



 END;